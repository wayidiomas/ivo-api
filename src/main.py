# src/main.py - IVO V2 Sistema Hier√°rquico Course ‚Üí Book ‚Üí Unit
"""
üöÄ IVO V2 - Intelligent Vocabulary Organizer
Sistema avan√ßado de gera√ß√£o hier√°rquica de unidades pedag√≥gicas com IA generativa,
RAG contextual e metodologias comprovadas para ensino de idiomas.

Arquitetura: Course ‚Üí Book ‚Üí Unit ‚Üí Content (Vocabulary, Sentences, Strategies, Assessments)
Vers√£o: 2.0.0 - Sem Redis (in-memory) mas preparado para implementa√ß√£o futura
"""

from fastapi import FastAPI, Request, Response, HTTPException
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import uvicorn
import time
import logging
import importlib
import os
from typing import Dict, Any, Optional, List

# Core imports - Database e configura√ß√£o
from src.core.database import init_database
from config.logger_config import setup_logging

# =============================================================================
# CONFIGURA√á√ÉO DE LOGGING INICIAL
# =============================================================================

logger = logging.getLogger(__name__)

# =============================================================================
# SISTEMA DE IMPORTA√á√ÉO DIN√ÇMICA ROBUSTO
# =============================================================================

class RouterLoader:
    """Sistema robusto de carregamento de routers com fallbacks."""
    
    def __init__(self):
        self.loaded_routers = {}
        self.failed_routers = {}
        self.router_configs = [
            # (nome_modulo, caminho_import, nome_router, √©_cr√≠tico)
            ("test_simple", "src.api.v2.test_simple", "router", True),  # Router simples para teste
            ("health", "src.api.health", "router", True),
            ("auth", "src.api.auth", "router", True),  # Authentication router
            ("courses", "src.api.v2.courses", "router", True),
            ("books", "src.api.v2.books", "router", True),
            ("units", "src.api.v2.units", "router", True),
            ("dashboard", "src.api.v2.dashboard", "router", True),  # ‚úÖ NOVO: Dashboard endpoints
            ("vocabulary", "src.api.v2.vocabulary", "router", True),
            ("sentences", "src.api.v2.sentences", "router", False),
            ("tips", "src.api.v2.tips", "router", False),
            ("grammar", "src.api.v2.grammar", "router", False),
            ("assessments", "src.api.v2.assessments", "router", False),
            ("qa", "src.api.v2.qa", "router", False),
            ("solve", "src.api.v2.solve", "router", False),  # ‚úÖ Assessment correction router
            ("pdf", "src.api.v2.pdf", "router", False),  # ‚úÖ NOVO: PDF generation router
            ("webhook_status", "src.api.v2.webhook_status", "router", False)
        ]
    
    def load_all_routers(self) -> Dict[str, Any]:
        """Carregar todos os routers com tratamento de erro individual."""
        logger.info("üîß Iniciando carregamento de routers...")
        
        for module_name, import_path, router_attr, is_critical in self.router_configs:
            try:
                # Import din√¢mico do m√≥dulo
                module = importlib.import_module(import_path)
                
                # Verificar se tem o atributo router
                if hasattr(module, router_attr):
                    router = getattr(module, router_attr)
                    self.loaded_routers[module_name] = {
                        "router": router,
                        "import_path": import_path,
                        "is_critical": is_critical
                    }
                    logger.info(f"‚úÖ {module_name} router carregado com sucesso")
                else:
                    self.failed_routers[module_name] = f"M√≥dulo sem atributo '{router_attr}'"
                    logger.warning(f"‚ö†Ô∏è {module_name}: m√≥dulo carregado mas sem router")
                    
            except ImportError as e:
                self.failed_routers[module_name] = f"ImportError: {str(e)}"
                if is_critical:
                    logger.error(f"‚ùå CR√çTICO: {module_name} falhou ao carregar: {str(e)}")
                else:
                    logger.warning(f"‚ö†Ô∏è {module_name} n√£o dispon√≠vel: {str(e)}")
                    
            except Exception as e:
                self.failed_routers[module_name] = f"Erro: {str(e)}"
                logger.error(f"‚ùå Erro inesperado ao carregar {module_name}: {str(e)}")
        
        # Carregar endpoints legados (V1) opcionalmente
        self._load_legacy_endpoints()
        
        return self.get_load_summary()
    
    def _load_legacy_endpoints(self) -> None:
        """Carregar endpoints legados V1 se dispon√≠veis."""
        try:
            legacy_modules = ["auth", "apostilas", "vocabs", "content", "images", "pdf"]
            legacy_loaded = []
            
            for module_name in legacy_modules:
                try:
                    module = importlib.import_module(f"src.api.{module_name}")
                    if hasattr(module, 'router'):
                        self.loaded_routers[f"legacy_{module_name}"] = {
                            "router": module.router,
                            "import_path": f"src.api.{module_name}",
                            "is_critical": False,
                            "is_legacy": True
                        }
                        legacy_loaded.append(module_name)
                except ImportError:
                    continue
                    
            if legacy_loaded:
                logger.info(f"‚úÖ Endpoints legados V1 carregados: {', '.join(legacy_loaded)}")
            else:
                logger.info("‚ÑπÔ∏è Nenhum endpoint legado V1 encontrado")
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erro ao carregar endpoints legados: {str(e)}")
    
    def get_load_summary(self) -> Dict[str, Any]:
        """Obter resumo do carregamento."""
        total_routers = len(self.router_configs)
        loaded_count = len([r for r in self.loaded_routers.values() if not r.get("is_legacy", False)])
        critical_loaded = len([r for r in self.loaded_routers.values() 
                              if r.get("is_critical", False) and not r.get("is_legacy", False)])
        critical_total = len([r for r in self.router_configs if r[3]])  # is_critical
        
        legacy_count = len([r for r in self.loaded_routers.values() if r.get("is_legacy", False)])
        
        return {
            "total_expected": total_routers,
            "loaded_count": loaded_count,
            "failed_count": len(self.failed_routers),
            "critical_loaded": critical_loaded,
            "critical_total": critical_total,
            "legacy_count": legacy_count,
            "completion_percentage": (loaded_count / total_routers) * 100,
            "system_functional": critical_loaded >= max(1, critical_total // 2),  # Pelo menos metade dos cr√≠ticos
            "loaded_routers": list(self.loaded_routers.keys()),
            "failed_routers": list(self.failed_routers.keys()),
            "failure_details": self.failed_routers
        }
    
    def get_router(self, name: str):
        """Obter router espec√≠fico ou None se n√£o carregado."""
        router_info = self.loaded_routers.get(name)
        return router_info["router"] if router_info else None


# Inst√¢ncia global do loader
router_loader = RouterLoader()

# =============================================================================
# SISTEMA DE MIDDLEWARE INTELIGENTE (SEM REDIS POR ENQUANTO)
# =============================================================================

class InMemoryRateLimiter:
    """Rate limiter simples em mem√≥ria (preparado para Redis futuro)."""
    
    def __init__(self):
        self.requests = {}  # {key: [(timestamp, count), ...]}
        self.limits = {
            "default": {"requests": 100, "window": 60},          # GET requests normais
            "create_course": {"requests": 5, "window": 30},       # Poucos cursos por usu√°rio
            "create_unit": {"requests": 10, "window": 30},        # M√∫ltiplas units por sess√£o
            "generate_vocabulary": {"requests": 3, "window": 20}, # OpenAI pesado, menos frequent
            "generate_content": {"requests": 3, "window": 20},    # sentences, tips, grammar
            "generate_assessments": {"requests": 2, "window": 20}, # Mais complexo, menos frequent
            "auth_login": {"requests": 10, "window": 60},         # Rate limit para login
            "auth_create_user": {"requests": 3, "window": 300},   # Criar usu√°rios mais restrito (5min)
        }
        self.cleanup_interval = 300  # 5 minutos
        self.last_cleanup = time.time()
    
    def _cleanup_old_entries(self):
        """Limpar entradas antigas para evitar vazamento de mem√≥ria."""
        if time.time() - self.last_cleanup < self.cleanup_interval:
            return
        
        current_time = time.time()
        keys_to_remove = []
        
        for key, entries in self.requests.items():
            # Remover entradas mais antigas que 1 hora
            self.requests[key] = [(ts, count) for ts, count in entries 
                                 if current_time - ts < 3600]
            if not self.requests[key]:
                keys_to_remove.append(key)
        
        for key in keys_to_remove:
            del self.requests[key]
        
        self.last_cleanup = current_time
    
    def is_allowed(self, identifier: str, endpoint: str = "default") -> tuple[bool, Dict[str, Any]]:
        """Verificar se request √© permitido."""
        self._cleanup_old_entries()
        
        limit_config = self.limits.get(endpoint, self.limits["default"])
        window = limit_config["window"]
        max_requests = limit_config["requests"]
        
        current_time = time.time()
        key = f"{identifier}:{endpoint}"
        
        # Obter requests no window atual
        if key not in self.requests:
            self.requests[key] = []
        
        # Filtrar apenas requests dentro da janela
        window_start = current_time - window
        recent_requests = [count for ts, count in self.requests[key] if ts > window_start]
        current_count = sum(recent_requests)
        
        # Verificar se est√° dentro do limite
        is_allowed = current_count < max_requests
        
        if is_allowed:
            # Adicionar este request
            self.requests[key].append((current_time, 1))
        
        return is_allowed, {
            "limit": max_requests,
            "remaining": max(0, max_requests - current_count - (1 if is_allowed else 0)),
            "reset_time": current_time + window,
            "window": window
        }
    
    # TODO: M√©todos para migra√ß√£o futura para Redis
    def _migrate_to_redis(self, redis_client):
        """Placeholder para migra√ß√£o futura para Redis."""
        # Implementar quando Redis for adicionado
        pass
    
    def _load_from_redis(self, redis_client):
        """Placeholder para carregar dados do Redis."""
        # Implementar quando Redis for adicionado
        pass


# Inst√¢ncia global do rate limiter
rate_limiter = InMemoryRateLimiter()

# =============================================================================
# AUDIT LOGGER SIMPLIFICADO (PREPARADO PARA EXTENS√ÉO)
# =============================================================================

class SimpleAuditLogger:
    """Audit logger simplificado (preparado para sistema completo futuro)."""
    
    def __init__(self):
        self.enabled = os.getenv("AUDIT_LOGGING_ENABLED", "true").lower() == "true"
        self.request_times = {}
    
    def start_request_tracking(self, request: Request) -> str:
        """Iniciar tracking de request."""
        if not self.enabled:
            return "disabled"
        
        request_id = getattr(request.state, 'request_id', f"req_{int(time.time() * 1000)}")
        self.request_times[request_id] = time.time()
        return request_id
    
    def end_request_tracking(self, request: Request, status_code: int) -> Dict[str, Any]:
        """Finalizar tracking e obter m√©tricas."""
        if not self.enabled:
            return {}
        
        request_id = getattr(request.state, 'audit_request_id', 'unknown')
        end_time = time.time()
        start_time = self.request_times.get(request_id, end_time)
        processing_time = end_time - start_time
        
        # Log se request demorou muito (threshold din√¢mico)
        slow_threshold = 2.0  # Padr√£o para opera√ß√µes normais
        
        # Ajustar threshold para opera√ß√µes de IA
        if any(endpoint in request.url.path for endpoint in ["/vocabulary", "/sentences", "/tips", "/grammar", "/assessments", "/qa"]):
            slow_threshold = 30.0  # 30s para gera√ß√£o de conte√∫do IA
        elif "/units" in request.url.path and "/context" in request.url.path:
            slow_threshold = 5.0   # 5s para contexto RAG
        
        if processing_time > slow_threshold:
            logger.warning(f"‚è±Ô∏è Request lento detectado: {request.url.path} - {processing_time:.2f}s (threshold: {slow_threshold}s)")
        
        # Limpar tracking
        if request_id in self.request_times:
            del self.request_times[request_id]
        
        return {
            "processing_time": processing_time,
            "status_code": status_code,
            "method": request.method,
            "path": str(request.url.path)
        }
    
    async def log_event(self, event_type: str, request: Optional[Request] = None, **kwargs):
        """Log de evento simples."""
        if not self.enabled:
            return
        
        log_data = {
            "timestamp": time.time(),
            "event_type": event_type,
            "path": str(request.url.path) if request else "system",
            **kwargs
        }
        
        logger.info(f"üìä AUDIT: {event_type} - {log_data}")


# Inst√¢ncia global do audit logger
audit_logger = SimpleAuditLogger()

# =============================================================================
# CONFIGURA√á√ïES DA API V2
# =============================================================================

API_INFO = {
    "name": "IVO V2 - Intelligent Vocabulary Organizer",
    "version": "2.0.0",
    "description": """
    üöÄ Sistema avan√ßado de gera√ß√£o hier√°rquica de materiais did√°ticos para ensino de idiomas.
    
    **Arquitetura Hier√°rquica:**
    üìö COURSE ‚Üí üìñ BOOK ‚Üí üìë UNIT ‚Üí üî§ CONTENT
    
    **Principais Recursos:**
    ‚Ä¢ üß† RAG Hier√°rquico para preven√ß√£o de repeti√ß√µes
    ‚Ä¢ üó£Ô∏è Valida√ß√£o IPA com 35+ s√≠mbolos fon√©ticos
    ‚Ä¢ üìä 6 Estrat√©gias TIPS + 2 Estrat√©gias GRAMMAR
    ‚Ä¢ üéØ 7 Tipos de Assessment com balanceamento autom√°tico
    ‚Ä¢ üéì Q&A baseado na Taxonomia de Bloom
    ‚Ä¢ üáßüá∑ Preven√ß√£o de interfer√™ncia L1‚ÜíL2 (portugu√™s‚Üíingl√™s)
    ‚Ä¢ üöÄ In-memory storage (sem Redis) preparado para migra√ß√£o futura
    """,
    "architecture": "Course ‚Üí Book ‚Üí Unit ‚Üí Content",
    "storage": "In-memory (preparado para Redis)",
    "features": [
        "Hierarquia pedag√≥gica obrigat√≥ria",
        "RAG contextual para progress√£o",
        "Rate limiting inteligente (in-memory)",
        "Auditoria empresarial simplificada",
        "Pagina√ß√£o avan√ßada com filtros",
        "Valida√ß√£o IPA autom√°tica",
        "MCP Image Analysis",
        "Metodologias cient√≠ficas integradas",
        "Preparado para Redis (implementa√ß√£o futura)"
    ]
}

API_TAGS = [
    {"name": "health", "description": "üè• Health checks e monitoramento do sistema"},
    {"name": "Authentication", "description": "üîê Sistema de autentica√ß√£o com tokens IVO e Bearer"},
    {"name": "system", "description": "‚öôÔ∏è Informa√ß√µes e estat√≠sticas do sistema"},
    {"name": "v2-courses", "description": "üìö Gest√£o de cursos completos com n√≠veis CEFR"},
    {"name": "v2-books", "description": "üìñ Gest√£o de books organizados por n√≠vel"},
    {"name": "v2-units", "description": "üìë Gest√£o de unidades pedag√≥gicas com imagens"},
    {"name": "v2-dashboard", "description": "üìä Dashboard com estat√≠sticas e unidades recentes"},
    {"name": "v2-vocabulary", "description": "üî§ Gera√ß√£o de vocabul√°rio com RAG + MCP"},
    {"name": "v2-sentences", "description": "üìù Gera√ß√£o de sentences conectadas"},
    {"name": "v2-tips", "description": "üí° Estrat√©gias TIPS para unidades lexicais"},
    {"name": "v2-grammar", "description": "üìê Estrat√©gias GRAMMAR para unidades gramaticais"},
    {"name": "v2-assessments", "description": "üéØ Gera√ß√£o de atividades balanceadas"},
    {"name": "v2-qa", "description": "‚ùì Q&A pedag√≥gico com Taxonomia de Bloom"},
    {"name": "v1-legacy", "description": "üîÑ Endpoints legados para compatibilidade"},
    {"name": "debug", "description": "üîß Endpoints de debug e desenvolvimento"}
]

# =============================================================================
# FUN√á√ïES UTILIT√ÅRIAS DE STATUS
# =============================================================================

def get_api_health() -> Dict[str, Any]:
    """Verificar sa√∫de da configura√ß√£o da API."""
    load_summary = router_loader.get_load_summary()
    
    return {
        "configuration_valid": load_summary["system_functional"],
        "completion_status": {
            "percentage": load_summary["completion_percentage"],
            "loaded": load_summary["loaded_count"],
            "expected": load_summary["total_expected"],
            "critical_loaded": load_summary["critical_loaded"],
            "critical_total": load_summary["critical_total"]
        },
        "missing_modules": load_summary["failed_routers"],
        "missing_details": load_summary["failure_details"],
        "v2_available": load_summary["loaded_count"] > 0,
        "v1_legacy_available": load_summary["legacy_count"] > 0,
        "system_functional": load_summary["system_functional"],
        "storage_type": "in-memory",
        "redis_ready": False  # Para implementa√ß√£o futura
    }

def get_hierarchical_flow() -> Dict[str, Any]:
    """Retornar informa√ß√µes sobre o fluxo hier√°rquico."""
    return {
        "structure": "Course ‚Üí Book ‚Üí Unit ‚Üí Content",
        "creation_order": [
            "1. POST /api/v2/courses (definir n√≠veis CEFR e metodologia)",
            "2. POST /api/v2/courses/{course_id}/books (criar books por n√≠vel)",
            "3. POST /api/v2/books/{book_id}/units (criar units com imagens obrigat√≥rias)",
            "4. Gera√ß√£o sequencial de conte√∫do por unit"
        ],
        "content_generation_sequence": [
            "vocabulary ‚Üí sentences ‚Üí strategy (tips|grammar) ‚Üí assessments ‚Üí qa"
        ],
        "rag_context": "Cada gera√ß√£o usa contexto de unidades anteriores para evitar repeti√ß√µes",
        "validation": "Hierarquia obrigat√≥ria em todas as opera√ß√µes",
        "storage": "In-memory com prepara√ß√£o para Redis futuro"
    }

# =============================================================================
# LIFECYCLE MANAGEMENT
# =============================================================================

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerenciar ciclo de vida da aplica√ß√£o com valida√ß√£o completa."""
    # Startup
    logger.info("üöÄ Iniciando IVO V2...")
    setup_logging()
    await init_database()
    
    # Carregar routers
    load_summary = router_loader.load_all_routers()
    
    # Registrar routers AP√ìS carregamento
    register_routers()
    
    api_health = get_api_health()
    
    # Log de inicializa√ß√£o
    await audit_logger.log_event(
        "application_startup",
        version=API_INFO["version"],
        api_health=api_health,
        features=API_INFO["features"],
        hierarchical_architecture=True,
        storage_type="in-memory"
    )
    
    # Console startup info
    print("=" * 80)
    print("üöÄ IVO V2 - Intelligent Vocabulary Organizer INICIADO!")
    print("=" * 80)
    print(f"üìã Vers√£o: {API_INFO['version']}")
    print(f"üèóÔ∏è Arquitetura: {API_INFO['architecture']}")
    print(f"üíæ Storage: In-memory (preparado para Redis)")
    print(f"‚úÖ API V2: {api_health['completion_status']['percentage']:.1f}% implementada")
    print(f"üìä Routers: {load_summary['loaded_count']}/{load_summary['total_expected']} carregados")
    print(f"üî¥ Cr√≠ticos: {load_summary['critical_loaded']}/{load_summary['critical_total']}")
    
    if load_summary["failed_routers"]:
        print(f"‚ö†Ô∏è  M√≥dulos faltando: {', '.join(load_summary['failed_routers'])}")
    
    if load_summary["legacy_count"] > 0:
        print(f"üîÑ Endpoints V1 legados: {load_summary['legacy_count']} carregados")
    
    print("üîß Recursos ativos:")
    print("   ‚úÖ Rate Limiting inteligente (in-memory)")
    print("   ‚úÖ Auditoria simplificada") 
    print("   ‚úÖ Pagina√ß√£o avan√ßada")
    print("   ‚úÖ Hierarquia Course ‚Üí Book ‚Üí Unit")
    print("   ‚úÖ RAG contextual")
    print("   ‚úÖ Valida√ß√£o IPA")
    print("   ‚úÖ MCP Image Analysis")
    print("   üîÑ Preparado para Redis (implementa√ß√£o futura)")
    
    print("üìö Endpoints principais:")
    print("   üìç /docs - Documenta√ß√£o Swagger")
    print("   üìç /api/v2/courses - Gest√£o de cursos")
    print("   üìç /health - Status do sistema")
    print("   üìç /system/stats - Analytics")
    print("=" * 80)
    
    if not api_health["system_functional"]:
        print("‚ö†Ô∏è  SISTEMA EM MODO DEGRADADO - Alguns recursos podem n√£o estar dispon√≠veis")
        print("=" * 80)
    
    yield
    
    # Shutdown
    await audit_logger.log_event("application_shutdown", uptime_info="graceful_shutdown")
    print("üëã IVO V2 finalizado graciosamente!")

# =============================================================================
# FASTAPI APPLICATION
# =============================================================================

app = FastAPI(
    title=API_INFO["name"],
    description=API_INFO["description"],
    version=API_INFO["version"],
    lifespan=lifespan,
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_tags=API_TAGS
)

# =============================================================================
# MIDDLEWARE CONFIGURATION
# =============================================================================

# 1. CORS Middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configurar conforme necess√°rio em produ√ß√£o
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "PATCH", "OPTIONS"],
    allow_headers=["*"],
)

# 2. Request ID Middleware
@app.middleware("http")
async def request_id_middleware(request: Request, call_next):
    """Adicionar Request ID √∫nico para rastreamento."""
    import uuid
    
    request_id = request.headers.get('X-Request-ID', str(uuid.uuid4()))
    request.state.request_id = request_id
    
    response = await call_next(request)
    response.headers['X-Request-ID'] = request_id
    
    return response

# 3. Rate Limiting Middleware
@app.middleware("http")
async def rate_limiting_middleware(request: Request, call_next):
    """Middleware de rate limiting in-memory."""
    # Identificar usu√°rio (IP como fallback)
    identifier = request.headers.get('X-User-ID', request.client.host if request.client else 'unknown')
    
    # Determinar endpoint para rate limiting
    endpoint = "default"
    path = request.url.path
    
    if "/api/v2/courses" in path and request.method == "POST":
        endpoint = "create_course"
    elif "/api/v2/units" in path and request.method == "POST":
        endpoint = "create_unit"
    elif "/vocabulary" in path and request.method == "POST":
        endpoint = "generate_vocabulary"
    elif any(x in path for x in ["/sentences", "/tips", "/grammar", "/qa"]) and request.method == "POST":
        endpoint = "generate_content"
    # assessments tem rate limiting pr√≥prio, n√£o aplicar aqui
    elif "/assessments" in path and request.method == "POST":
        endpoint = "default"  # Usar limite padr√£o, pois j√° tem rate limiting espec√≠fico
    # Auth endpoints com rate limiting espec√≠fico
    elif "/api/auth/login" in path and request.method == "POST":
        endpoint = "auth_login"
    elif "/api/auth/create-user" in path and request.method == "POST":
        endpoint = "auth_create_user"
    
    # Verificar rate limit
    is_allowed, rate_info = rate_limiter.is_allowed(identifier, endpoint)
    
    if not is_allowed:
        return Response(
            content=f'{{"error": "Rate limit exceeded", "retry_after": {rate_info["window"]}}}',
            status_code=429,
            headers={
                "X-RateLimit-Limit": str(rate_info["limit"]),
                "X-RateLimit-Remaining": "0",
                "X-RateLimit-Reset": str(int(rate_info["reset_time"])),
                "Retry-After": str(rate_info["window"])
            }
        )
    
    # Processar request
    response = await call_next(request)
    
    # Adicionar headers de rate limit
    response.headers["X-RateLimit-Limit"] = str(rate_info["limit"])
    response.headers["X-RateLimit-Remaining"] = str(rate_info["remaining"])
    response.headers["X-RateLimit-Reset"] = str(int(rate_info["reset_time"]))
    
    return response

# 4. Authentication Middleware
from src.middleware.auth_middleware import BearerTokenMiddleware

auth_middleware = BearerTokenMiddleware()

@app.middleware("http")
async def authentication_middleware(request: Request, call_next):
    """Middleware de autentica√ß√£o Bearer para endpoints V2."""
    return await auth_middleware(request, call_next)

# 5. Audit Middleware
@app.middleware("http")
async def audit_middleware(request: Request, call_next):
    """Middleware para auditoria simplificada de requests."""
    request_id = audit_logger.start_request_tracking(request)
    request.state.audit_request_id = request_id
    
    response = None
    status_code = 500
    error_occurred = False
    
    try:
        response = await call_next(request)
        status_code = response.status_code
        return response
        
    except Exception as e:
        error_occurred = True
        status_code = 500
        
        # Log do erro
        await audit_logger.log_event(
            "api_error",
            request=request,
            error_type="middleware_exception",
            error_message=str(e),
            request_id=request_id
        )
        raise
        
    finally:
        # ‚úÖ CORRE√á√ÉO: S√≥ fazer tracking se response existir
        if response is not None:
            # Finalizar tracking
            performance_metrics = audit_logger.end_request_tracking(request, status_code)
            
            # Log para endpoints V2 (simplificado)
            if request.url.path.startswith('/api/v2/') and performance_metrics:
                await audit_logger.log_event(
                    "v2_api_access",
                    request=request,
                    endpoint=request.url.path,
                    method=request.method,
                    error_occurred=error_occurred,
                    # Passar apenas as m√©tricas sem duplicar status_code
                    performance_metrics={
                        "processing_time": performance_metrics.get("processing_time", 0),
                        "duration_ms": performance_metrics.get("duration_ms", 0),
                        "path": performance_metrics.get("path", ""),
                        "method": performance_metrics.get("method", "")
                    }
                )

# =============================================================================
# REGISTRO DIN√ÇMICO DE ROUTERS - EXECUTAR AP√ìS MIDDLEWARES
# =============================================================================

def register_routers():
    """Registrar todos os routers carregados dinamicamente."""
    logger.info("üìù Registrando routers...")
    
    # Health router (sempre primeiro se dispon√≠vel)
    health_router = router_loader.get_router("health")
    if health_router:
        try:
            app.include_router(health_router, prefix="/health", tags=["health"])
            logger.info("‚úÖ Health router registrado")
        except Exception as e:
            logger.error(f"‚ùå Erro ao registrar health router: {str(e)}")
    
    # Auth router (cr√≠tico para V2 API)
    auth_router = router_loader.get_router("auth")
    if auth_router:
        try:
            app.include_router(auth_router, tags=["Authentication"])
            logger.info("‚úÖ Auth router registrado")
        except Exception as e:
            logger.error(f"‚ùå Erro ao registrar auth router: {str(e)}")
    
    # Routers V2 principais com prefixos corretos
    v2_router_mappings = [
        ("test_simple", "/api/v2", ["v2-test"]),                # ‚úÖ Router simples para teste
        ("courses", "/api/v2", ["v2-courses"]),                 # üîß CORRIGIDO: base para rotas /courses 
        ("books", "/api/v2", ["v2-books"]),                     # ‚úÖ Base (rotas aninhadas)
        ("units", "/api/v2", ["v2-units"]),                     # ‚úÖ Base (rotas aninhadas)
        ("dashboard", "/api/v2", ["v2-dashboard"]),             # ‚úÖ NOVO: Dashboard endpoints
        ("vocabulary", "/api/v2", ["v2-vocabulary"]),           # ‚úÖ Base (rotas /units/{id}/vocabulary)
        ("sentences", "/api/v2", ["v2-sentences"]),             # ‚úÖ Base (rotas /units/{id}/sentences)
        ("tips", "/api/v2", ["v2-tips"]),                       # ‚úÖ Base (rotas /units/{id}/tips)
        ("grammar", "/api/v2", ["v2-grammar"]),                 # ‚úÖ Base (rotas /units/{id}/grammar)
        ("assessments", "/api/v2", ["v2-assessments"]),         # ‚úÖ Base (rotas /units/{id}/assessments)
        ("qa", "/api/v2", ["v2-qa"]),                           # ‚úÖ Base (rotas /units/{id}/qa)
        ("solve", "/api/v2", ["v2-solve"]),                     # ‚úÖ Base (rotas /units/{id}/solve_assessments)
        ("pdf", "/api/v2", ["v2-pdf"])                          # ‚úÖ NOVO: Base (rotas /units/{id}/pdf/professor|student)
    ]
    
    registered_count = 0
    logger.info(f"üîç Iniciando registro de {len(v2_router_mappings)} routers V2...")
    
    for router_name, prefix, tags in v2_router_mappings:
        logger.info(f"üîç Processando router: {router_name}")
        router = router_loader.get_router(router_name)
        
        if router:
            logger.info(f"‚úÖ Router {router_name} obtido com sucesso, tentando registrar em {prefix}")
            try:
                app.include_router(
                    router,
                    prefix=prefix,
                    tags=tags,
                    responses={
                        404: {"description": "Recurso n√£o encontrado"},
                        400: {"description": "Dados inv√°lidos ou hierarquia incorreta"},
                        429: {"description": "Rate limit excedido"},
                        500: {"description": f"Erro interno no m√≥dulo {router_name}"}
                    }
                )
                registered_count += 1
                logger.info(f"‚úÖ Router {router_name} registrado COM SUCESSO em {prefix}")
            except Exception as e:
                logger.error(f"‚ùå Erro ao registrar router {router_name}: {str(e)}")
                import traceback
                logger.error(f"Stack trace para {router_name}: {traceback.format_exc()}")
        else:
            logger.warning(f"‚ö†Ô∏è Router {router_name} n√£o foi encontrado no router_loader")
    
    # Routers legados V1
    legacy_count = 0
    for router_name, router_info in router_loader.loaded_routers.items():
        if router_info.get("is_legacy", False):
            try:
                # Extrair nome do m√≥dulo original
                module_name = router_name.replace("legacy_", "")
                app.include_router(
                    router_info["router"], 
                    prefix=f"/{module_name}", 
                    tags=["v1-legacy"]
                )
                legacy_count += 1
                logger.info(f"‚úÖ Router legado {module_name} registrado")
            except Exception as e:
                logger.error(f"‚ùå Erro ao registrar router legado {router_name}: {str(e)}")
    
    logger.info(f"üìä Registro completo: {registered_count} routers V2, {legacy_count} legados")
    
    # Verifica√ß√£o p√≥s-registro para debug
    _verify_routes_registered()


def _verify_routes_registered():
    """Verificar se as rotas foram realmente registradas."""
    total_routes = len([r for r in app.routes if hasattr(r, 'path')])
    api_v2_routes = [r for r in app.routes if hasattr(r, 'path') and r.path.startswith('/api/v2')]
    health_routes = [r for r in app.routes if hasattr(r, 'path') and r.path.startswith('/health')]
    
    logger.info(f"üîç Verifica√ß√£o: {len(api_v2_routes)} rotas V2, {len(health_routes)} rotas health, {total_routes} total")
    
    # Log de algumas rotas V2 para confirmar
    if api_v2_routes:
        logger.info("üìã Algumas rotas V2 registradas:")
        for route in api_v2_routes[:5]:  # Primeiras 5
            methods = list(route.methods) if hasattr(route, 'methods') and route.methods else ['GET']
            logger.info(f"   ‚Ä¢ {methods} {route.path}")
        if len(api_v2_routes) > 5:
            logger.info(f"   ... e mais {len(api_v2_routes) - 5} rotas")
    else:
        logger.warning("‚ö†Ô∏è NENHUMA rota V2 foi registrada!")


# =============================================================================
# ENDPOINTS INFORMATIVOS
# =============================================================================

@app.get("/", tags=["root"])
async def root(request: Request):
    """Informa√ß√µes gerais da API IVO V2."""
    await audit_logger.log_event("root_info_access", request=request)
    
    api_health = get_api_health()
    hierarchical_flow = get_hierarchical_flow()
    
    return {
        **API_INFO,
        "status": "operational" if api_health["system_functional"] else "degraded",
        "api_health": api_health,
        "endpoints": {
            "v2_primary": {
                "courses": "/api/v2/courses",
                "books": "/api/v2/courses/{course_id}/books", 
                "units": "/api/v2/books/{book_id}/units",
                "content_generation": {
                    "vocabulary": "/api/v2/units/{unit_id}/vocabulary",
                    "sentences": "/api/v2/units/{unit_id}/sentences",
                    "tips": "/api/v2/units/{unit_id}/tips",
                    "grammar": "/api/v2/units/{unit_id}/grammar",
                    "assessments": "/api/v2/units/{unit_id}/assessments",
                    "qa": "/api/v2/units/{unit_id}/qa"
                }
            },
            "system": {
                "health": "/health",
                "stats": "/system/stats",
                "detailed_health": "/system/health",
                "rate_limits": "/system/rate-limits"
            },
            "documentation": {
                "swagger": "/docs",
                "redoc": "/redoc",
                "api_overview": "/api/overview"
            },
            "v1_legacy": "Dispon√≠vel se carregado" if api_health.get("v1_legacy_available") else "N√£o dispon√≠vel"
        },
        "hierarchical_flow": hierarchical_flow,
        "content_generation_workflow": [
            "1. üìö CREATE Course (with CEFR levels)",
            "2. üìñ CREATE Books (one per CEFR level)",
            "3. üìë CREATE Units (with mandatory images)",
            "4. üî§ GENERATE Vocabulary (RAG + MCP analysis)",
            "5. üìù GENERATE Sentences (connected to vocabulary)",
            "6. üí° GENERATE Strategy (TIPS for lexical | GRAMMAR for grammatical)",
            "7. üéØ GENERATE Assessments (2 of 7 types, balanced)",
            "8. ‚ùì GENERATE Q&A (optional - Bloom's taxonomy)"
        ],
        "key_features": {
            "rag_intelligence": "Context-aware generation prevents repetition",
            "assessment_balancing": "Automatic selection of complementary activities",
            "ipa_validation": "35+ phonetic symbols validated",
            "l1_interference": "Portuguese‚ÜíEnglish error prevention",
            "storage": "In-memory (preparado para Redis)",
            "methodologies": ["Direct Method", "TIPS Strategies", "Bloom's Taxonomy"]
        },
        "migration_info": {
            "redis_status": "Preparado para implementa√ß√£o futura",
            "current_storage": "In-memory com TTL",
            "migration_ready": True
        }
    }

@app.get("/api/overview", tags=["system"])
async def api_overview(request: Request):
    """Vis√£o geral completa da API IVO V2."""
    await audit_logger.log_event("api_overview_access", request=request)
    
    api_health = get_api_health()
    load_summary = router_loader.get_load_summary()
    
    return {
        "system_info": {
            "name": API_INFO["name"],
            "version": API_INFO["version"],
            "architecture": API_INFO["architecture"],
            "status": "operational" if api_health["system_functional"] else "degraded",
            "storage_type": "in-memory",
            "redis_ready": False
        },
        "implementation_status": {
            "completion_percentage": api_health["completion_status"]["percentage"],
            "loaded_modules": api_health["completion_status"]["loaded"],
            "expected_modules": api_health["completion_status"]["expected"],
            "missing_modules": api_health.get("missing_modules", []),
            "missing_details": api_health.get("missing_details", {}),
            "health_status": "healthy" if api_health["system_functional"] else "degraded"
        },
        "router_summary": {
            "total_loaded": load_summary["loaded_count"],
            "critical_loaded": load_summary["critical_loaded"],
            "legacy_loaded": load_summary["legacy_count"],
            "failed_routers": load_summary["failed_routers"],
            "system_functional": load_summary["system_functional"]
        },
        "hierarchical_architecture": {
            "levels": ["Course", "Book", "Unit", "Content"],
            "mandatory_hierarchy": True,
            "rag_context": "Each level provides context for content generation",
            "progression": "CEFR-based pedagogical progression"
        },
        "content_generation_pipeline": {
            "steps": ["aims", "vocabulary", "sentences", "strategy", "assessments", "qa"],
            "rag_features": [
                "Vocabulary deduplication",
                "Strategy balancing", 
                "Assessment variety",
                "Progression analysis"
            ],
            "ai_integration": "100% contextual analysis with technical fallbacks"
        },
        "quality_assurance": {
            "automatic_validations": 22,
            "ipa_validation": "35+ phonetic symbols",
            "cefr_compliance": "Automatic level adaptation",
            "l1_interference": "Portuguese‚ÜíEnglish error prevention"
        },
        "storage_and_performance": {
            "current_storage": "In-memory with TTL cleanup",
            "rate_limiting": "In-memory with endpoint-specific limits",
            "audit_logging": "Simplified (preparado para extens√£o)",
            "redis_migration": {
                "status": "Ready for implementation",
                "benefits": ["Persistence", "Clustering", "Advanced caching"],
                "implementation_effort": "Low (infrastructure prepared)"
            }
        },
        "advanced_features": API_INFO["features"],
        "legacy_support": {
            "v1_endpoints": api_health.get("v1_legacy_available", False),
            "backward_compatibility": True
        }
    }

@app.get("/system/stats", tags=["system"])
async def system_stats(request: Request):
    """Estat√≠sticas detalhadas do sistema IVO V2."""
    await audit_logger.log_event("system_stats_access", request=request)
    
    try:
        # Tentar obter estat√≠sticas do banco
        try:
            from src.services.hierarchical_database import hierarchical_db
            analytics = await hierarchical_db.get_system_analytics()
        except ImportError:
            analytics = {
                "courses_count": "N/A - Service not available",
                "books_count": "N/A - Service not available", 
                "units_count": "N/A - Service not available",
                "generated_at": time.time()
            }
        
        api_health = get_api_health()
        load_summary = router_loader.get_load_summary()
        
        return {
            "success": True,
            "system_analytics": analytics,
            "api_status": {
                "version": API_INFO["version"],
                "health": api_health,
                "features_enabled": API_INFO["features"],
                "modules_status": {
                    "v2_loaded": load_summary["loaded_count"],
                    "v2_expected": load_summary["total_expected"],
                    "v1_legacy": load_summary["legacy_count"],
                    "critical_functional": load_summary["system_functional"]
                }
            },
            "performance_metrics": {
                "rate_limiting": "Active with in-memory storage",
                "audit_logging": "Simplified request tracking",
                "pagination": "Advanced with filters",
                "cache_status": "In-memory TTL-based",
                "storage_type": "In-memory (Redis-ready)"
            },
            "storage_info": {
                "current_type": "in-memory",
                "persistence": False,
                "redis_ready": True,
                "cleanup_active": True,
                "memory_management": "Auto TTL cleanup"
            },
            "router_analytics": {
                "loaded_routers": load_summary["loaded_routers"],
                "failed_routers": load_summary["failed_routers"],
                "failure_details": load_summary["failure_details"]
            },
            "timestamp": analytics.get("generated_at", time.time())
        }
        
    except Exception as e:
        logger.error(f"Erro ao obter estat√≠sticas: {str(e)}")
        return {
            "success": False,
            "error": "Statistics unavailable",
            "message": str(e),
            "api_health": get_api_health(),
            "timestamp": time.time()
        }

@app.get("/system/health", tags=["system"])
async def detailed_health_check(request: Request):
    """Health check detalhado com verifica√ß√£o de depend√™ncias."""
    await audit_logger.log_event("detailed_health_check", request=request)
    
    health_status = {
        "status": "healthy",
        "timestamp": time.time(),
        "version": API_INFO["version"],
        "services": {},
        "features": {},
        "storage": {},
        "api_configuration": get_api_health()
    }
    
    # Check Database
    try:
        from config.database import get_supabase_client
        supabase = get_supabase_client()
        result = supabase.table("ivo_courses").select("id").limit(1).execute()
        health_status["services"]["database"] = "healthy"
    except Exception as e:
        health_status["services"]["database"] = f"unhealthy: {str(e)}"
        health_status["status"] = "degraded"
    
    # Check OpenAI API
    try:
        openai_key = os.getenv("OPENAI_API_KEY")
        if openai_key and openai_key.startswith("sk-"):
            health_status["services"]["openai_api"] = "configured"
        else:
            health_status["services"]["openai_api"] = "not_configured"
            health_status["status"] = "degraded"
    except Exception as e:
        health_status["services"]["openai_api"] = f"unavailable: {str(e)}"
    
    # Storage Health
    health_status["storage"] = {
        "type": "in-memory",
        "rate_limiter": "active",
        "audit_logger": "active",
        "cleanup_active": True,
        "redis_available": False,
        "redis_ready": True,  # C√≥digo preparado
        "memory_usage": "managed with TTL"
    }
    
    # Check Features
    health_status["features"] = {
        "rate_limiting": "active (in-memory)",
        "audit_logging": "active (simplified)", 
        "pagination": "active",
        "hierarchical_structure": "active",
        "rag_integration": "active" if health_status["api_configuration"]["v2_available"] else "limited",
        "ipa_validation": "active",
        "mcp_image_analysis": "configured"
    }
    
    # Router Health
    load_summary = router_loader.get_load_summary()
    health_status["routers"] = {
        "total_loaded": load_summary["loaded_count"],
        "critical_loaded": load_summary["critical_loaded"],
        "system_functional": load_summary["system_functional"],
        "failed_count": load_summary["failed_count"]
    }
    
    # Overall status
    if not health_status["api_configuration"]["system_functional"]:
        health_status["status"] = "degraded"
        health_status["degradation_reason"] = "Missing critical modules"
    
    if health_status["services"]["database"].startswith("unhealthy"):
        health_status["status"] = "degraded"
    
    return health_status

@app.get("/system/rate-limits", tags=["system"])
async def rate_limits_info(request: Request):
    """Informa√ß√µes detalhadas sobre configura√ß√£o de rate limits."""
    await audit_logger.log_event("rate_limits_info", request=request)
    
    return {
        "rate_limits": rate_limiter.limits,
        "storage_type": "in-memory",
        "redis_ready": True,
        "description": "Rate limits in-memory com prepara√ß√£o para Redis",
        "identification_strategy": {
            "priority_order": ["X-User-ID header", "IP address", "fallback"],
            "headers_checked": ["X-User-ID", "X-Forwarded-For", "X-Real-IP"],
            "window_formats": ["requests per seconds"],
            "storage_type": "In-memory dictionary com TTL cleanup"
        },
        "response_headers": [
            "X-RateLimit-Limit (requests allowed)",
            "X-RateLimit-Remaining (requests left)", 
            "X-RateLimit-Reset (reset timestamp)",
            "Retry-After (seconds to wait on 429)"
        ],
        "storage_details": {
            "type": "In-memory dictionary",
            "persistence": "Session-based (non-persistent)",
            "cleanup": "Automatic TTL-based expiration (5 min intervals)",
            "scalability": "Single-instance only",
            "redis_migration": {
                "ready": True,
                "benefits": ["Persistence", "Multi-instance", "Advanced features"],
                "implementation": "Preparado com m√©todos de migra√ß√£o"
            }
        },
        "performance": {
            "cleanup_interval": f"{rate_limiter.cleanup_interval} seconds",
            "memory_managed": True,
            "auto_cleanup": True
        }
    }

@app.get("/system/redis-migration", tags=["system"])
async def redis_migration_info(request: Request):
    """Informa√ß√µes sobre prepara√ß√£o para migra√ß√£o Redis."""
    await audit_logger.log_event("redis_migration_info", request=request)
    
    return {
        "migration_status": {
            "code_ready": True,
            "infrastructure_ready": False,  # Redis n√£o instalado
            "migration_effort": "Low",
            "estimated_downtime": "< 5 minutes"
        },
        "current_limitations": {
            "persistence": "None - data lost on restart",
            "clustering": "Single instance only",
            "advanced_features": "Basic rate limiting only"
        },
        "redis_benefits": {
            "persistence": "Data survives restarts",
            "clustering": "Multi-instance support",
            "advanced_rate_limiting": "Sliding windows, complex rules",
            "caching": "Advanced caching with TTL",
            "pub_sub": "Real-time notifications",
            "analytics": "Historical data tracking"
        },
        "implementation_steps": [
            "1. Install Redis server",
            "2. Add redis-py dependency",
            "3. Set REDIS_ENABLED=true in .env",
            "4. Configure REDIS_URL",
            "5. Restart application",
            "6. Automatic migration of rate limiter",
            "7. Optional: Migrate audit logs to Redis"
        ],
        "configuration_example": {
            "env_variables": {
                "REDIS_ENABLED": "true",
                "REDIS_URL": "redis://localhost:6379",
                "REDIS_PASSWORD": "optional",
                "REDIS_DB": "0"
            }
        },
        "migration_methods": {
            "rate_limiter": "InMemoryRateLimiter._migrate_to_redis()",
            "audit_logger": "Future implementation",
            "cache_system": "Future implementation"
        }
    }

# =============================================================================
# ERROR HANDLERS GLOBAIS (MELHORADOS)
# =============================================================================

@app.exception_handler(404)
async def not_found_handler(request: Request, exc):
    """Handler para recursos n√£o encontrados."""
    await audit_logger.log_event(
        "not_found_error",
        request=request,
        path=str(request.url),
        method=request.method
    )
    
    return JSONResponse(
        status_code=404,
        content={
            "success": False,
            "error_code": "RESOURCE_NOT_FOUND",
            "message": "Recurso n√£o encontrado",
            "details": {
                "path": str(request.url),
                "method": request.method,
                "request_id": getattr(request.state, 'request_id', 'unknown'),
                "system_status": get_api_health()["system_functional"]
            },
            "suggestions": [
                "Verifique se o ID est√° correto",
                "Confirme que o recurso existe na hierarquia Course‚ÜíBook‚ÜíUnit",
                "Consulte /docs para endpoints dispon√≠veis",
                "Verifique /api/overview para estrutura da API"
            ],
            "hierarchical_help": {
                "course_operations": "GET /api/v2/courses para listar cursos",
                "book_operations": "GET /api/v2/courses/{course_id}/books para books do curso",
                "unit_operations": "GET /api/v2/books/{book_id}/units para units do book"
            }
        }
    )

@app.exception_handler(429)
async def rate_limit_handler(request: Request, exc):
    """Handler para rate limiting excedido."""
    await audit_logger.log_event(
        "rate_limit_exceeded",
        request=request,
        path=str(request.url),
        method=request.method
    )
    
    return JSONResponse(
        status_code=429,
        content={
            "success": False,
            "error_code": "RATE_LIMIT_EXCEEDED",
            "message": "Limite de requisi√ß√µes excedido",
            "details": {
                "path": str(request.url),
                "method": request.method,
                "storage_type": "in-memory",
                "retry_after": 60,
                "request_id": getattr(request.state, 'request_id', 'unknown')
            },
            "suggestions": [
                "Aguarde 60 segundos antes de tentar novamente",
                "Considere implementar cache local para reduzir requests",
                "Verifique se n√£o h√° requests desnecess√°rios em loop",
                "Para opera√ß√µes em lote, use pagina√ß√£o adequada"
            ],
            "rate_limit_info": {
                "check_limits": "GET /system/rate-limits para ver limites espec√≠ficos",
                "storage": "In-memory (Redis migration available)",
                "windows": "Janelas deslizantes com cleanup autom√°tico"
            }
        }
    )

@app.exception_handler(422)
async def validation_error_handler(request: Request, exc):
    """Handler para erros de valida√ß√£o Pydantic."""
    validation_errors = []
    
    if hasattr(exc, 'errors'):
        for error in exc.errors():
            validation_errors.append({
                "field": " ‚Üí ".join(str(loc) for loc in error.get('loc', [])),
                "message": error.get('msg', 'Validation error'),
                "type": error.get('type', 'unknown'),
                "input": error.get('input')
            })
    
    await audit_logger.log_event(
        "validation_error",
        request=request,
        path=str(request.url),
        validation_errors=validation_errors
    )
    
    return JSONResponse(
        status_code=422,
        content={
            "success": False,
            "error_code": "VALIDATION_ERROR",
            "message": "Dados inv√°lidos fornecidos",
            "details": {
                "path": str(request.url),
                "method": request.method,
                "request_id": getattr(request.state, 'request_id', 'unknown'),
                "validation_errors": validation_errors
            },
            "suggestions": [
                "Verifique os tipos de dados enviados",
                "Confirme que campos obrigat√≥rios est√£o presentes",
                "Para hierarquia: course_id e book_id devem existir",
                "Consulte /docs para estrutura exata dos dados"
            ],
            "common_validation_issues": {
                "cefr_level": "Deve ser um dos: A1, A2, B1, B2, C1, C2",
                "unit_type": "Deve ser: lexical_unit ou grammar_unit",
                "language_variant": "Deve ser: american_english, british_english, etc.",
                "hierarchy": "IDs de course_id e book_id devem existir no sistema"
            }
        }
    )

@app.exception_handler(500)
async def internal_error_handler(request: Request, exc):
    """Handler para erros internos do servidor."""
    await audit_logger.log_event(
        "internal_server_error",
        request=request,
        error_type=type(exc).__name__,
        error_message=str(exc)
    )
    
    return JSONResponse(
        status_code=500,
        content={
            "success": False,
            "error_code": "INTERNAL_SERVER_ERROR", 
            "message": "Erro interno do servidor",
            "details": {
                "path": str(request.url),
                "method": request.method,
                "request_id": getattr(request.state, 'request_id', 'unknown'),
                "timestamp": time.time(),
                "exception_type": type(exc).__name__,
                "system_status": get_api_health()["system_functional"]
            },
            "suggestions": [
                "Tente novamente em alguns instantes",
                "Verifique se todas as depend√™ncias est√£o funcionando",
                "Para erros persistentes, consulte /system/health",
                "Contate o suporte t√©cnico se necess√°rio"
            ],
            "system_checks": {
                "health_endpoint": "/system/health para diagn√≥stico completo",
                "stats_endpoint": "/system/stats para m√©tricas do sistema",
                "database_status": "Verificar conectividade com Supabase",
                "openai_status": "Verificar configura√ß√£o da API OpenAI"
            }
        }
    )

@app.exception_handler(400)
async def bad_request_handler(request: Request, exc):
    """Handler para bad requests."""
    await audit_logger.log_event(
        "bad_request",
        request=request,
        error_message=str(exc)
    )
    
    return JSONResponse(
        status_code=400,
        content={
            "success": False,
            "error_code": "BAD_REQUEST",
            "message": "Requisi√ß√£o inv√°lida",
            "details": {
                "path": str(request.url),
                "method": request.method,
                "request_id": getattr(request.state, 'request_id', 'unknown'),
                "error_description": str(exc)
            },
            "suggestions": [
                "Verifique a estrutura da requisi√ß√£o",
                "Confirme que a hierarquia est√° correta",
                "Para uploads: m√°ximo 10MB por imagem",
                "Consulte a documenta√ß√£o em /docs"
            ],
            "hierarchical_requirements": {
                "course_creation": "Requer name, target_levels, language_variant",
                "book_creation": "Requer course_id v√°lido e target_level",
                "unit_creation": "Requer book_id v√°lido e pelo menos 1 imagem",
                "content_generation": "Requer unit_id v√°lido e status adequado"
            }
        }
    )

# =============================================================================
# ENDPOINTS DE DEBUG E DESENVOLVIMENTO
# =============================================================================

@app.get("/debug/api-status", tags=["debug"], include_in_schema=False)
async def debug_api_status():
    """Endpoint de debug para verificar status da API."""
    load_summary = router_loader.get_load_summary()
    
    return {
        "debug_info": {
            "router_loader_summary": load_summary,
            "api_health": get_api_health(),
            "loaded_routers": router_loader.loaded_routers,
            "failed_routers": router_loader.failed_routers
        },
        "storage_info": {
            "rate_limiter_active": True,
            "rate_limiter_requests": len(rate_limiter.requests),
            "audit_logger_enabled": audit_logger.enabled,
            "redis_ready": True,
            "redis_enabled": False
        },
        "environment_checks": {
            "python_version": "3.11+",
            "fastapi_version": "Latest",
            "langchain_version": "0.3.x",
            "pydantic_version": "2.x"
        },
        "migration_readiness": {
            "redis_code_ready": True,
            "migration_methods_available": True,
            "fallback_mechanisms": True
        }
    }

@app.get("/debug/routes", tags=["debug"], include_in_schema=False)
async def debug_routes():
    """Lista todas as rotas registradas."""
    routes_info = []
    
    for route in app.routes:
        if hasattr(route, 'methods') and hasattr(route, 'path'):
            routes_info.append({
                "path": route.path,
                "methods": list(route.methods) if route.methods else [],
                "name": getattr(route, 'name', 'unnamed'),
                "tags": getattr(route, 'tags', [])
            })
    
    return {
        "total_routes": len(routes_info),
        "routes": sorted(routes_info, key=lambda x: x['path']),
        "routes_by_prefix": {
            "api_v2": [r for r in routes_info if r['path'].startswith('/api/v2')],
            "system": [r for r in routes_info if r['path'].startswith('/system')],
            "health": [r for r in routes_info if r['path'].startswith('/health')],
            "debug": [r for r in routes_info if r['path'].startswith('/debug')],
            "legacy": [r for r in routes_info if not any(r['path'].startswith(p) for p in ['/api/v2', '/system', '/health', '/debug', '/docs', '/redoc', '/openapi.json'])]
        },
        "router_summary": router_loader.get_load_summary()
    }

@app.get("/debug/storage", tags=["debug"], include_in_schema=False)
async def debug_storage():
    """Debug de informa√ß√µes de storage."""
    return {
        "rate_limiter": {
            "type": "InMemoryRateLimiter",
            "active_requests": len(rate_limiter.requests),
            "limits_configured": rate_limiter.limits,
            "cleanup_interval": rate_limiter.cleanup_interval,
            "last_cleanup": rate_limiter.last_cleanup,
            "redis_ready": hasattr(rate_limiter, '_migrate_to_redis')
        },
        "audit_logger": {
            "type": "SimpleAuditLogger",
            "enabled": audit_logger.enabled,
            "active_requests": len(audit_logger.request_times),
            "extensible": True
        },
        "migration_info": {
            "redis_migration_ready": True,
            "persistent_storage_ready": False,
            "clustering_ready": False,
            "implementation_effort": "Low"
        }
    }


@app.get("/debug/router-registration", tags=["debug"], include_in_schema=False)
async def debug_router_registration():
    """Debug detalhado do processo de registro de routers."""
    try:
        registration_debug = {
            "router_loader_status": {
                "loaded_routers": list(router_loader.loaded_routers.keys()),
                "failed_routers": list(router_loader.failed_routers.keys()),
                "total_loaded": len(router_loader.loaded_routers),
                "load_summary": router_loader.get_load_summary()
            },
            "v2_router_mappings": [],
            "registration_attempts": [],
            "app_routes_registered": []
        }
        
        # Testar o processo de registro novamente
        # Redefinir v2_router_mappings aqui para debug
        v2_router_mappings_debug = [
            ("test_simple", "/api/v2", ["v2-test"]),
            ("courses", "/api/v2/courses", ["v2-courses"]),
            ("books", "/api/v2", ["v2-books"]),
            ("units", "/api/v2", ["v2-units"]),
            ("vocabulary", "/api/v2/vocabulary", ["v2-vocabulary"]),
            ("sentences", "/api/v2/sentences", ["v2-sentences"]),
            ("tips", "/api/v2/tips", ["v2-tips"]),
            ("grammar", "/api/v2/grammar", ["v2-grammar"]),
            ("assessments", "/api/v2/assessments", ["v2-assessments"]),
            ("qa", "/api/v2/qa", ["v2-qa"])
        ]
        
        for router_name, prefix, tags in v2_router_mappings_debug:
            mapping_info = {
                "router_name": router_name,
                "prefix": prefix,
                "tags": tags,
                "router_available": False,
                "router_routes": [],
                "registration_attempt": "not_attempted"
            }
            
            # Verificar se router est√° dispon√≠vel
            router = router_loader.get_router(router_name)
            if router:
                mapping_info["router_available"] = True
                mapping_info["router_type"] = str(type(router))
                
                # Tentar listar rotas do router
                try:
                    mapping_info["router_routes"] = [
                        {
                            "path": route.path,
                            "methods": list(route.methods) if hasattr(route, 'methods') else [],
                            "name": getattr(route, 'name', 'unnamed')
                        }
                        for route in router.routes
                    ]
                except Exception as e:
                    mapping_info["router_routes"] = f"Error listing routes: {str(e)}"
                
                # Tentar registro (simula√ß√£o)
                try:
                    # N√£o vamos realmente registrar, apenas verificar se daria erro
                    mapping_info["registration_attempt"] = "would_succeed"
                except Exception as e:
                    mapping_info["registration_attempt"] = f"would_fail: {str(e)}"
            
            registration_debug["v2_router_mappings"].append(mapping_info)
        
        # Listar rotas atualmente registradas na app
        for route in app.routes:
            if hasattr(route, 'path') and route.path.startswith('/api/v2'):
                registration_debug["app_routes_registered"].append({
                    "path": route.path,
                    "methods": list(route.methods) if hasattr(route, 'methods') else [],
                    "name": getattr(route, 'name', 'unnamed')
                })
        
        return {
            "success": True,
            "debug_info": registration_debug,
            "analysis": {
                "routers_loaded": len(router_loader.loaded_routers),
                "v2_routes_registered": len(registration_debug["app_routes_registered"]),
                "problem_diagnosis": "Check registration_attempts for issues" if len(registration_debug["app_routes_registered"]) == 0 else "Routes seem to be registering"
            }
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "debug_info": "Failed to analyze router registration"
        }

# =============================================================================
# STARTUP E EXECU√á√ÉO
# =============================================================================

if __name__ == "__main__":
    """
    Execu√ß√£o direta do servidor FastAPI.
    Para desenvolvimento: python src/main.py
    Para produ√ß√£o: uvicorn src.main:app --host 0.0.0.0 --port 8000
    """
    
    # Configura√ß√µes de desenvolvimento
    host = os.getenv("HOST", "127.0.0.1")
    port = int(os.getenv("PORT", 8000))
    reload = os.getenv("RELOAD", "true").lower() == "true"
    log_level = os.getenv("LOG_LEVEL", "info").lower()
    
    print("üîß Configura√ß√£o de execu√ß√£o:")
    print(f"   üìç Host: {host}")
    print(f"   üîå Port: {port}")
    print(f"   üîÑ Reload: {reload}")
    print(f"   üìù Log Level: {log_level}")
    print(f"   üíæ Storage: In-memory (Redis-ready)")
    print("   üìö Documenta√ß√£o: http://localhost:8000/docs")
    print("   üîß Debug: http://localhost:8000/debug/api-status")
    print("   üîÑ Redis Migration: http://localhost:8000/system/redis-migration")
    print("=" * 50)
    
    uvicorn.run(
        "src.main:app",
        host=host,
        port=port,
        reload=reload,
        log_level=log_level,
        access_log=True,
        timeout_keep_alive=300,  # 5 minutos para modelos 2025
        timeout_graceful_shutdown=300  # 5 minutos para shutdown graceful
    )